// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JustInTimeClient is the client API for JustInTime service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JustInTimeClient interface {
	Justify(ctx context.Context, in *JustificationRequest, opts ...grpc.CallOption) (*JustificationResponse, error)
}

type justInTimeClient struct {
	cc grpc.ClientConnInterface
}

func NewJustInTimeClient(cc grpc.ClientConnInterface) JustInTimeClient {
	return &justInTimeClient{cc}
}

func (c *justInTimeClient) Justify(ctx context.Context, in *JustificationRequest, opts ...grpc.CallOption) (*JustificationResponse, error) {
	out := new(JustificationResponse)
	err := c.cc.Invoke(ctx, "/pkg.apis.JustInTime/Justify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JustInTimeServer is the server API for JustInTime service.
// All implementations must embed UnimplementedJustInTimeServer
// for forward compatibility
type JustInTimeServer interface {
	Justify(context.Context, *JustificationRequest) (*JustificationResponse, error)
	mustEmbedUnimplementedJustInTimeServer()
}

// UnimplementedJustInTimeServer must be embedded to have forward compatible implementations.
type UnimplementedJustInTimeServer struct {
}

func (UnimplementedJustInTimeServer) Justify(context.Context, *JustificationRequest) (*JustificationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Justify not implemented")
}
func (UnimplementedJustInTimeServer) mustEmbedUnimplementedJustInTimeServer() {}

// UnsafeJustInTimeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JustInTimeServer will
// result in compilation errors.
type UnsafeJustInTimeServer interface {
	mustEmbedUnimplementedJustInTimeServer()
}

func RegisterJustInTimeServer(s grpc.ServiceRegistrar, srv JustInTimeServer) {
	s.RegisterService(&JustInTime_ServiceDesc, srv)
}

func _JustInTime_Justify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JustificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JustInTimeServer).Justify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pkg.apis.JustInTime/Justify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JustInTimeServer).Justify(ctx, req.(*JustificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JustInTime_ServiceDesc is the grpc.ServiceDesc for JustInTime service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JustInTime_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pkg.apis.JustInTime",
	HandlerType: (*JustInTimeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Justify",
			Handler:    _JustInTime_Justify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apis/lumberjust.proto",
}
